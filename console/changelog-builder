#!/usr/bin/php
<?php
/**
 * Copyleft (c) 2013 Pierre Cassat and contributors
 * <www.ateliers-pierrot.fr> - <contact@ateliers-pierrot.fr>
 * License GPL-3.0 <http://www.opensource.org/licenses/gpl-3.0.html>
 * Sources <https://github.com/atelierspierrot/atelierspierrot>
 * 
 * console/changelog-builder
 *
 * Build a full changelog BSD styled from a local GIT clone.
 * 
 * For more infos run:
 * 
 *     ~$ php path/to/changelog-builder -h
 * 
 */
@ini_set('display_errors','1'); @error_reporting(E_ALL ^ E_NOTICE);

define('_AP_SCRIPT_VERSION', '1.0.0');
define('_AP_SCRIPT_NAME', 'ChangeLog builder for GIT repository');
define('_AP_SCRIPT_AUTHOR', 'Les Ateliers Pierrot <www.ateliers-pierrot.fr>');
define('_AP_SCRIPT_FILENAME', basename(__FILE__));
define('_AP_SCRIPT_DIR', __DIR__);
define('_AP_CONSOLE_LIBRARY', __DIR__.'/console_lib.php');

// -------------------
// requirements
// -------------------

if (@file_exists(_AP_CONSOLE_LIBRARY)) {
    include_once _AP_CONSOLE_LIBRARY;
} else {
    die('The library "console_lib.php" is required in the same directory as this script!'."\n");
}
cliOnly();

// -------------------
// defaults
// -------------------

global $filename, $backup_filename, $path, $output, $go, $mode, $title, $since, $until;
$filename = 'ChangeLog';
$backup_filename = '%s.bak';
$path='.';
$output=false;
$go=false;
$mode='replace';
$title=false;
$since=null;
$until=null;

// -------------------
// library
// -------------------

function writeHelp()
{
    global $files_collection;
    write();
    writeBold('Presentation');
    write('    Shell script to generate a changelog file info of a GIT repository in a BSD style.');
    write();
    writeBold('Usage');
    write('    ~$ '.getBold('php '._AP_SCRIPT_FILENAME.' -[option[=value]] -g'));
    write();
    writeBold('Options');
    writeList(array(
        'g'=>'"GO": process the changelog generation ; option required (!)',
        'p=path' => 'path to the working root directory, absolute path or relative to `cwd` (default is `.`, the current directory)',
        'f=filename' => 'the filename of the generated changelog (default is `ChangeLog`)',
        'b=filename' => 'the filename used to backup an existing changelog file (default is `ChangeLog.bak`)',
        'o'=>'output: writes the changelog on screen instead of writing the file',
        'm=mode'=>'the mode to use on an existing changelog file (`append`: add at the end, `prepend`: add at the beginning, `replace`: default)',
        't=title'=>'the title of the changelog (by default, the last tag name will be the title, or the current branch)',
//        's=hash'=>'define a commit hash to use as SINCE log condition (the nearest commit in the concerned history)',
//        'u=hash'=>'define a commit hash to use as UNTIL log condition (the oldest commit in the concerned history)',
    ), '    %s    %s');
    write();
    writeBold('Changelog string style');
    write('
        Last tag found / GENERATION-DATE
        ================================
        
        2013-03-20
        
          * Commit title
            Author name <author@email> | full iso date | commit abbreviated hash
              Commit message if so ...
        
          * ...
');
}

// -------------------
// options treatments
// -------------------

function runHelp()
{
    writeTitle();
    writeHelp();
    exit(0);
}

function runFilename($name)
{
    global $filename;
    $filename = $name;
}

function runBackupFilename($name)
{
    global $backup_filename;
    $backup_filename = $name;
}

function runMode($name)
{
    global $mode;
    $mode = $name;
}

function runTitle($name)
{
    global $title;
    $title = $name;
}

function runSince($hash)
{
    global $since;
    $since = $hash;
}

function runUntil($hash)
{
    global $until;
    $until = $hash;
}

function runGo()
{
    global $go;
    $go = true;
}

function runOutput()
{
    global $output;
    $output = true;
}

function runPath($_path)
{
    global $path;
    $path = $_path;
}

function run()
{
    global $filename, $backup_filename, $path, $output, $go, $mode, $title, $since, $until;
    if (false===$go) {
        trigger_error('You must use option "g" to process!', E_USER_ERROR);
    }
    if (file_exists($path)) {
        if (true===isGitRepository($path)) {
            $changelog_str = '';
            
            if (empty($title)) {
                $title = getGitNearestTag($path);
                if (!$title) {
                    $branch = getGitCurrentBranch($path);
                    $title = $branch.' HEAD';
                }
            }
            $changelog_ttl = $title." / ".date('Y-m-d');
            $changelog_str .= $changelog_ttl."\n".str_pad('=', strlen($changelog_ttl), '=')."\n";
            
            $full_changelog = getCommitsHistory($path, null, $since, $until);
            if (!empty($full_changelog)) {
                $organized_by_date = array();
                foreach($full_changelog as $commit) {
                    $date = substr($commit['date'], 0, 10);
                    if (!isset($organized_by_date[$date])) {
                        $organized_by_date[$date] = array();
                    }
                    $organized_by_date[$date][] = $commit;
                }
                foreach(array_keys($organized_by_date) as $date) {
                    $changelog_str .= "\n".$date."\n";
                    foreach($organized_by_date[$date] as $commit) {
                        $changelog_str .= "\n".'  * '.$commit['title'];
                        $changelog_str .= "\n".'    '.$commit['author_name'].' <'.$commit['author_email'].'> | '.$commit['date'].' | '.$commit['commit-abbrev'];
                        $message = $commit['message'];
                        $message = trim($message);
                        if (!empty($commit['message'])) {
                            $changelog_str .= "\n".'      '.wordwrap($commit['message'], 80, "\n      ");
                        }
                        $changelog_str .= "\n";
                    }
                }
            }
            $changelog_str .= "\n";

            if (true===$output) {
                write($changelog_str);
            } else {
                $changelog_file = rtrim($path, '/').'/'.$filename;
                if (!file_exists($changelog_file)) $mode = 'replace';
                switch($mode) {
                    case 'prepend':
                        if (false!==prependInFile($changelog_file, $changelog_str)) {
                            writeBold(sprintf('Creating changelog and prepend it in file "%s"', $changelog_file));
                        } else {
                            trigger_error(sprintf('Can not edit file "%s"!', $changelog_file), E_USER_ERROR);
                        }
                        break;
                    case 'append':
                        if (false!==appendInFile($changelog_file, $changelog_str)) {
                            writeBold(sprintf('Creating changelog and append it in file "%s"', $changelog_file));
                        } else {
                            trigger_error(sprintf('Can not edit file "%s"!', $changelog_file), E_USER_ERROR);
                        }
                        break;
                    case 'replace': default:
                        $backup_changelog_file = rtrim($path, '/').'/'.sprintf($backup_filename, $filename);
                        if (false!==writeFile($changelog_file, $changelog_str, $backup_changelog_file)) {
                            writeBold(sprintf('Creating changelog in file "%s"', $changelog_file));
                        } else {
                            trigger_error(sprintf('Can not create file "%s"!', $changelog_file), E_USER_ERROR);
                        }
                        break;
                }
            }
        } else {
            trigger_error(sprintf('Directory "%s" is not a GIT repository!', $path), E_USER_ERROR);
        }
    } else {
        trigger_error(sprintf('Directory "%s" not found!', $path), E_USER_ERROR);
    }
}

// -------------------
// script execution
// -------------------

// arguments
$args = array(
    'h'=>'help',
    'f:'=>'filename',
    'b:'=>'backupFilename',
    'p:'=>'path',
    'm:'=>'mode',
    't:'=>'title',
    's:'=>'since',
    'u:'=>'until',
    'o'=>'output',
    'g'=>'go',
);
$options = getopt( implode('', array_keys($args)) );

// if no option at all
if (empty($options)) {
    runHelp();
} else {
    foreach($options as $name=>$value) {
        if (isset($args[$name]) || isset($args[$name.':'])) {
            $argname = isset($args[$name.':']) ? $name.':' : $name;
            $_meth = 'run'.ucfirst($args[$argname]);
            $_arg = !empty($value) ? $value : null;
            if (function_exists($_meth)) {
                $_meth($_arg);
            } else {
                trigger_error('Unknown option "'.$name.'"!', E_USER_ERROR);
            }
        } else {
            trigger_error('Unknown option "'.$name.'"!', E_USER_ERROR);
        }
    }
}
run();
exit(0);
// Endfile
