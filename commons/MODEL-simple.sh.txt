#!/bin/bash
#
# Copyleft (â†„) 2013-2015 Pierre Cassat and contributors
# <www.ateliers-pierrot.fr> - <contact@ateliers-pierrot.fr>
# License GPL-3.0 <http://www.opensource.org/licenses/gpl-3.0.html>
# Sources <http://github.com/atelierspierrot/atelierspierrot>
#
# See instructions at the bottom of this file.
# 

#### SCRIPT SETTINGS #####################################################################

# version (used by -V)
VERSION="0.0.1-dev"
# name of the script (used by -V)
NAME="$0"
# common options (only short options)
COMMONOPTS="hiqvxV"
# presentation string (used by -h)
PRESENTATION="This script is a bash script model."
# usage string (used by -h and errors)
USAGE="usage:  ${0}  [-${COMMONOPTS}]  [options [=value]]  <arguments>"
# help string (used by -h)
HELP=$(cat <<EOF

options:
    -h        help: show this information message
    -v        verbose: increase script verbosity
    -q        quiet: decrease script verbosity, nothing will be written unless errors
    -i        interactive: ask for confirmation before any action
    -x        debug: see commands to run but not run them actually
    -V        version infos
EOF
);

#### LIBRARY #############################################################################

# script flags
declare -x VERBOSE=false; declare -x QUIET=false; declare -x INTERACTIVE=false; declare -x DEBUG=false; declare -x USERRESPONSE;

# show version info
version () { ${QUIET} && echo "${VERSION}" || echo "${NAME} ${VERSION}"; return 0; }

# show help info
help () { echo "## ${NAME} (${VERSION})"; echo "${PRESENTATION}"; echo; echo "${USAGE}"; echo "${HELP}"; echo; return 0; }

# show usage info
usage () { echo "${USAGE}"; return 0; }

# error ( string , exit status = 1 )
error () { echo "!! >> ${1:-unknown error}"; echo; usage; exit ${2:-1}; }

# prompt ( string , default = y , options = Y/n ) user response is loaded in USERRESPONSE
prompt () { read -p "> ${1} ? [${3:-Y/n}] " answer; export USERRESPONSE="${answer:-${2:-y}}"; return 0; }

#### SCRIPT OPTIONS ######################################################################
if [ "$1" == 'help' ]; then help; exit 0; fi
OPTIND=1
while getopts ":${COMMONOPTS}-:" OPTION; do
    OPTARG="${OPTARG#=}"
    case $OPTION in
        h) help && exit 0;;
        i) export INTERACTIVE=true; export QUIET=false;;
        v) export VERBOSE=true; export QUIET=false;;
        x) export DEBUG=true;;
        q) export VERBOSE=false; export INTERACTIVE=false; export QUIET=true;;
        V) version && exit 0;;
        \?) error "unknown option '${OPTARG}'!";;
        :) error "option '${OPTARG}' requires an argument!";;
    esac
done
# this will "delete" options from the scripts arguments: $1 becomes the first argument
set -- "${@:OPTIND}"; export OPTIND=1;

#### SCRIPT PROCESS ######################################################################

$DEBUG \
    && echo "debug echo" \
    || echo "NO debug echo";
$VERBOSE && echo "verbose echo";
$QUIET && echo "quiet echo";
$INTERACTIVE && echo "interactive echo";
echo YO

#prompt "my test prompt string"; echo $USERRESPONSE;
#error "my error string"

# this is the end
exit 0

#### HOW TO ##############################################################################
#
# ## Usage
#
# To build a new shell script based on this model, make a copy of it, rename it as 
# `XXX.sh`, give it execution rights running `chmod a+x XXX.sh` and then open it in an
# editor like VIM:
#
#     cp path/to/package/commons/MODEL-simple.sh.txt new/script/path/name.sh
#     chmod a+x new/script/path/name.sh
#     vim new/script/path/name.sh
#
# The first thing to do is to edit the "script settings" first part writing your script name 
# and version and a long string explaining its usage. You can add any setting required in 
# your script.
#
# Then you may add your script's options in the options treatment if so.
#
# Finally, go to the "script process" section and write your script.
#
# ## Simple library
#
# A simple library is embedded with common functions such as `error (str , status)`.
#
# ## Common options
#
# - option `-x` enables the `DEBUG` script's flag
# - option `-v` enables the `VERBOSE` script's flag
# - option `-q` enables the `QUIET` script's flag
# - option `-i` enables the `INTERACTIVE` script's flag
#
#       $FLAG \
#           && echo "when flag is ON" \
#           || echo "when flag is OFF (default)";
#
# Return bugs and follow source updates at
# <http://github.com/atelierspierrot/atelierspierrot/commons/MODEL-simple.sh.txt>
#
##########################################################################################
